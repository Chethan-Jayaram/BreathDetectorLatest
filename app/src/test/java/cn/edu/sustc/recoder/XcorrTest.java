package cn.edu.sustc.recoder;


import org.jtransforms.fft.DoubleFFT_1D;
import org.junit.Assert;
import org.junit.Test;

import java.util.Collections;
import java.util.LinkedList;
import java.util.Vector;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import cn.edu.sustc.recoder.Utils.Complex;
import cn.edu.sustc.recoder.Utils.FFT;
import cn.edu.sustc.recoder.Utils.Grawer;
import cn.edu.sustc.recoder.Utils.ReadCsv;
import cn.edu.sustc.recoder.Utils.ReadMusicFile;
import cn.edu.sustc.recoder.Utils.TrackPeak;
import cn.edu.sustc.recoder.Utils.funcFFT;
import cn.edu.sustc.recoder.Utils.loopQueue;
import cn.edu.sustc.recoder.Utils.xcorr;

import static cn.edu.sustc.recoder.Utils.TrackPeak.findPeaks;
import static cn.edu.sustc.recoder.Utils.xcorr.get_range;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

public class XcorrTest {
    @Test
    public void readTest() {
        byte[] s1 = ReadMusicFile.read("D:\\studioProject\\Recoder\\app\\src\\test\\java\\cn\\edu\\sustc\\recoder\\s1.txt");
        byte[] s2 = ReadMusicFile.read("D:\\studioProject\\Recoder\\app\\src\\test\\java\\cn\\edu\\sustc\\recoder\\s2.txt");
        System.out.println(s1.length);
        System.out.println(s2.length);
    }
    @Test
    public void CodeingTest() {
        double[] s1 = {1, 2, 3, 4, 5, 6, 7, 8,9};
        DoubleFFT_1D df1 = new DoubleFFT_1D(s1.length);
        double[] s11 = new double[s1.length*2];
        System.arraycopy(s1,0,s11,0,s1.length);
        df1.realForwardFull(s11);
        Complex[] as = Complex.parseDouble(s11);
        double[] s11_c = Complex.decodeDouble(as);
        assertArrayEquals(s11,s11_c,0.001);
    }
    @Test
    public void ComplexFFTTest() {
        double[] s1 = {1, 2, 3, 4, 5, 6, 7, 8,9};
        DoubleFFT_1D df1 = new DoubleFFT_1D(s1.length);
        double[] s11 = new double[s1.length*2];
        System.arraycopy(s1,0,s11,0,s1.length);
        df1.realForwardFull(s11);
        Complex[] as = Complex.parseDouble(s11);
        Complex[]res = FFT.fft(as);
        assertEquals(as.length,res.length);
    }

    @Test
    public void xcorrTest() {
        double[] s11 = {-1, 1, -1, 1, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8};
        double[] s22 = {1, 2, 3, 4, 5, 6, 7, 8};
        double[] ind = FFT.xcorr(s11, s22, true);
        for (double i : ind
                ) {
            System.out.println(i);
        }
    }
    @Test
    public void xcorrFTest() {
        int[] s11 = {-1, 1, -1, 1, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8};
        int[] s22 = {1, 2, 3, 4, 5, 6, 7, 8};
        double[] ind = funcFFT.xcorr(s11, s22, true);
        for (double i : ind
                ) {
            System.out.println(i);
        }
    }
    @Test
    public void mp3ReadTest() {
        byte[] s1 = ReadMusicFile.read("D:\\studioProject\\Recoder\\app\\src\\main\\assets\\music\\Lemon.mp3");
        System.out.println(s1.length);
        for (int i = 0; i < 10; i++) {
            System.out.println(s1[i]);
        }
    }

    @Test
    public void FFTTest() {
        double[] s1 = {1, 2, 3, 4, 5, 6, 7, 8,9};
        double[] s2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 23};
        double[] s3 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 23};
        DoubleFFT_1D df1 = new DoubleFFT_1D(s1.length);
        double[] s11 = new double[s1.length*2];
        System.arraycopy(s1,0,s11,0,s1.length);
        df1.realForwardFull(s11);
        Complex[] as = Complex.parseDouble(s11);
        System.out.println();
    }

    @Test
    public void listTest() {
        short st= 1;
        double db = (double)st;
        short[] s11 = {-1, 1, -1, 1, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8};
        byte[] s22 = {1, 2, 3, 4, 5, 6, 7, 8};
        LinkedList s = new LinkedList();
        s.add(s11);
        LinkedList s1 = new LinkedList();
        s1.add(s22);
        xcorr.xcorr(s,s1);
    }

    @Test
    public void ListConcurrent() {
        final loopQueue<Short> s = new loopQueue<Short>(200);
        Lock curl = new ReentrantLock();
        try {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    int j =0;
                    for (int i = 0; i <10000000 ; i++) {
                        short sh = 2;
                        try {
                            s.add(sh);
                        } catch (ArrayStoreException e) {

                        }

                    }
                }
            }).start();
            new Thread(new Runnable() {
                @Override
                public void run() {
                    int j = 0;
                    for (int i = 0; i <10000000 ; i++) {
                        try {
                            s.removeOne();
                        } catch (IllegalAccessException e) {
                            System.out.println("remove wrong:"+j++);
                        }
                    }
                }
            }).start();
        } catch (Exception e) {
            e.getCause().printStackTrace();
        }
        assertEquals(s.count,0);
    }

    @Test
    public void auto_corr_Test() {
        double[] a = {0.00441976163967579,0.0077497004820354,0.00835285226362308,0.00728265235953277,0.0106335602687941,0.0116477286093166,0.415873236350293,-0.00811864873272723,0.00142055091760486,-0.00219404323222665,0.00251908933810312,-0.00323055385585825,-0.00226659226837123,0.00111765157019383,-0.00018000652047559,0.00398508291334451,0.0036681228194473,0.00157802231619142,0.000505865707349451,-0.0142505104326021,-0.000541254971052133,-0.00124449845509689,0.000768387927426541,0.00230337233007286,0.00173743344062454,0.00162006659163736,-0.00464712245675437,0.00489218430331424,-4.93032850643893E-05,0.00188945094508833,-0.00123913406679932,-0.0013379421525023,0.00420902541191386,-0.0128348626936853,-0.0013670841638774,-0.00585572487300172,-0.00177683728644545,-0.000617852511389627,0.00239319651665559,-0.00367086312661901,0.00149329458350327,0.00145050463138853,0.000780411309559345,0.00191376786913127,-0.00199614278872823,-0.00566691904714572,-0.000458279246125085,-0.00107102854434928,0.000775393174371211,-0.000798237080448475,-0.00715355261958128,0.00162085731578795,-0.00119719292650841,0.002527523491901,0.000309439453208771,-0.00107824080969683,0.0013842390217276,-0.00062784771855548,-0.00179751895106517,-0.00352922599674831,-0.000479448739997002,-0.00110776761709008,-0.00492415781989727,2.13811039922324E-05,0.0159643021406845,-0.00130180248739889,-0.00541930403948959,-0.00206269222576994,0.000733462717245004,0.000628038151971808,0.000920191983812768,0.00174399453119208,-0.00251667615265516,-0.00268940325010302,0.00100879500550631,-0.0064076024791559,0.00281029365488542,0.00174972123962344,0.000483252018013011,0.000506497092872128,0.00245100429938568,-0.0011877784778777,0.000994919174503006,-0.00806088593455759,-0.0383365409816716,-0.0002186734996725,0.0120837453165146,-0.000835165987260619,-0.000580031403366793,-0.000585104464041725,-0.000257135081272654,0.00170298671791996,0.000427452509146498,-6.82114321876315E-05,-0.000813055337207991,0.000835235495117465,-0.00591524847014138,0.000519792674325267,0.00014411484873314,7.70756642957532E-05,0.000395247949586411,0.000547587523507205,0.000215117172687837,0.000544060104051704,-0.000271751192747555,3.26896829201256E-05,0.000498748438600788,0.000208098477829252,0.000958180872851475,0.000190198899669744,0.000277272153071537,-0.000479637837458496,0.000481563729413353,-0.00107159189344756,-0.00447876225502156,-0.00101751939609375,-0.000304336400792138,0.000470584346683234,-0.000107538905638485,0.000497665346389106,0.000627949737679996,4.88949979697145E-05,-0.00039512155049054,-0.000118389117994278,0.00149631508035815,-0.000353937255178405,-0.00014493282836393,-1.8906071500617E-05,-0.000270730894031221,0.000408339719637822,-0.000162292026576541,-0.000622465904508408,0.00117917055376206,2.37910367652805E-05,0.000541294672045535,0.0286578921044221,0.000848041241150177,-0.000229159274147239,-0.000934505937354682,-0.000603240411954698,-0.0010702324591163,0.000187410970505925,1.78790299689979E-05,0.000802886831775998,0.00103065956133924,-0.000823926235624072,0.000408911112592239,8.50403344385062E-05,0.000307683699647114,0.0119753997901684,-0.000321856929034706,0.000343048105217271,-0.000442022818675981,-3.87510800961555E-07,0.000174167657425159,-0.000470461966187169,0.000182040731499078,-5.54861347575458E-05,0.000233528368121357,-0.000548186582887196,-4.09517291847794E-05,-0.000604543225381768,0.000819552843746733,0.00329620630098543,-0.000853530663792387,-0.00211663952703377,0.00122571002381183,0.000209782199216559,7.78695875536528E-05,0.000446698954495478,-0.000320285960619365,-0.000516382958644548,-0.0035319035185146,-0.00152702983301967,-0.000207718483142126,-0.000178483640810939,-0.00150404706251189,-0.0018301692535547,-0.000145351997950766,-0.000543404184612559,-0.00108156765225294,-0.000651559939335342,-0.000286594629011254,0.000392137977081541,0.000358231716715798,0.000424903822334191,0.000821339358106035,0.000104044456282294,0.00150026360041058,0.0004997062080635,0.000740913123229457,0.000657630652140806,-0.00034708471177565,0.000137686520486804,0.000886835651609047,0.000932922880622772,0.000679784094797131,-0.000284141678656834,-9.23957101742201E-06,-0.000139814669910684
        };
        new Grawer(a, "fig1", "before_auto_corr").show();
        double[] ans = xcorr.autoCorr(a);
        new Grawer(ans, "fig1", "after_auto_corr").show();
    }

    @Test
    public void readcsvTest() {
        double[][] input = ReadCsv.ReadCsvFile("D:\\studioProject\\Recoder\\app\\src\\test\\java\\cn\\edu\\sustc\\recoder\\matrix.csv");
        double[] s = input[0];
        double[] a = {0.00441976163967579,0.0077497004820354,0.00835285226362308,0.00728265235953277,0.0106335602687941,0.0116477286093166,0.415873236350293,-0.00811864873272723,0.00142055091760486,-0.00219404323222665,0.00251908933810312,-0.00323055385585825,-0.00226659226837123,0.00111765157019383,-0.00018000652047559,0.00398508291334451,0.0036681228194473,0.00157802231619142,0.000505865707349451,-0.0142505104326021,-0.000541254971052133,-0.00124449845509689,0.000768387927426541,0.00230337233007286,0.00173743344062454,0.00162006659163736,-0.00464712245675437,0.00489218430331424,-4.93032850643893E-05,0.00188945094508833,-0.00123913406679932,-0.0013379421525023,0.00420902541191386,-0.0128348626936853,-0.0013670841638774,-0.00585572487300172,-0.00177683728644545,-0.000617852511389627,0.00239319651665559,-0.00367086312661901,0.00149329458350327,0.00145050463138853,0.000780411309559345,0.00191376786913127,-0.00199614278872823,-0.00566691904714572,-0.000458279246125085,-0.00107102854434928,0.000775393174371211,-0.000798237080448475,-0.00715355261958128,0.00162085731578795,-0.00119719292650841,0.002527523491901,0.000309439453208771,-0.00107824080969683,0.0013842390217276,-0.00062784771855548,-0.00179751895106517,-0.00352922599674831,-0.000479448739997002,-0.00110776761709008,-0.00492415781989727,2.13811039922324E-05,0.0159643021406845,-0.00130180248739889,-0.00541930403948959,-0.00206269222576994,0.000733462717245004,0.000628038151971808,0.000920191983812768,0.00174399453119208,-0.00251667615265516,-0.00268940325010302,0.00100879500550631,-0.0064076024791559,0.00281029365488542,0.00174972123962344,0.000483252018013011,0.000506497092872128,0.00245100429938568,-0.0011877784778777,0.000994919174503006,-0.00806088593455759,-0.0383365409816716,-0.0002186734996725,0.0120837453165146,-0.000835165987260619,-0.000580031403366793,-0.000585104464041725,-0.000257135081272654,0.00170298671791996,0.000427452509146498,-6.82114321876315E-05,-0.000813055337207991,0.000835235495117465,-0.00591524847014138,0.000519792674325267,0.00014411484873314,7.70756642957532E-05,0.000395247949586411,0.000547587523507205,0.000215117172687837,0.000544060104051704,-0.000271751192747555,3.26896829201256E-05,0.000498748438600788,0.000208098477829252,0.000958180872851475,0.000190198899669744,0.000277272153071537,-0.000479637837458496,0.000481563729413353,-0.00107159189344756,-0.00447876225502156,-0.00101751939609375,-0.000304336400792138,0.000470584346683234,-0.000107538905638485,0.000497665346389106,0.000627949737679996,4.88949979697145E-05,-0.00039512155049054,-0.000118389117994278,0.00149631508035815,-0.000353937255178405,-0.00014493282836393,-1.8906071500617E-05,-0.000270730894031221,0.000408339719637822,-0.000162292026576541,-0.000622465904508408,0.00117917055376206,2.37910367652805E-05,0.000541294672045535,0.0286578921044221,0.000848041241150177,-0.000229159274147239,-0.000934505937354682,-0.000603240411954698,-0.0010702324591163,0.000187410970505925,1.78790299689979E-05,0.000802886831775998,0.00103065956133924,-0.000823926235624072,0.000408911112592239,8.50403344385062E-05,0.000307683699647114,0.0119753997901684,-0.000321856929034706,0.000343048105217271,-0.000442022818675981,-3.87510800961555E-07,0.000174167657425159,-0.000470461966187169,0.000182040731499078,-5.54861347575458E-05,0.000233528368121357,-0.000548186582887196,-4.09517291847794E-05,-0.000604543225381768,0.000819552843746733,0.00329620630098543,-0.000853530663792387,-0.00211663952703377,0.00122571002381183,0.000209782199216559,7.78695875536528E-05,0.000446698954495478,-0.000320285960619365,-0.000516382958644548,-0.0035319035185146,-0.00152702983301967,-0.000207718483142126,-0.000178483640810939,-0.00150404706251189,-0.0018301692535547,-0.000145351997950766,-0.000543404184612559,-0.00108156765225294,-0.000651559939335342,-0.000286594629011254,0.000392137977081541,0.000358231716715798,0.000424903822334191,0.000821339358106035,0.000104044456282294,0.00150026360041058,0.0004997062080635,0.000740913123229457,0.000657630652140806,-0.00034708471177565,0.000137686520486804,0.000886835651609047,0.000932922880622772,0.000679784094797131,-0.000284141678656834,-9.23957101742201E-06,-0.000139814669910684
        };
        assertArrayEquals(a, s,0.000001);
    }
    @Test
    public void get_range_Test() {
        double[][] input = ReadCsv.ReadCsvFile("D:\\studioProject\\Recoder\\app\\src\\test\\java\\cn\\edu\\sustc\\recoder\\matrix.csv");
        int[]index = get_range(input);
        for (int i = 0; i <index.length ; i++) {
            System.out.println(index[i]);
        }
    }
    @Test
    public void find_peak_Test() {
        double[] a = {0.00441976163967579,0.0077497004820354,0.00835285226362308,0.00728265235953277,0.0106335602687941,0.0116477286093166,0.415873236350293,-0.00811864873272723,0.00142055091760486,-0.00219404323222665,0.00251908933810312,-0.00323055385585825,-0.00226659226837123,0.00111765157019383,-0.00018000652047559,0.00398508291334451,0.0036681228194473,0.00157802231619142,0.000505865707349451,-0.0142505104326021,-0.000541254971052133,-0.00124449845509689,0.000768387927426541,0.00230337233007286,0.00173743344062454,0.00162006659163736,-0.00464712245675437,0.00489218430331424,-4.93032850643893E-05,0.00188945094508833,-0.00123913406679932,-0.0013379421525023,0.00420902541191386,-0.0128348626936853,-0.0013670841638774,-0.00585572487300172,-0.00177683728644545,-0.000617852511389627,0.00239319651665559,-0.00367086312661901,0.00149329458350327,0.00145050463138853,0.000780411309559345,0.00191376786913127,-0.00199614278872823,-0.00566691904714572,-0.000458279246125085,-0.00107102854434928,0.000775393174371211,-0.000798237080448475,-0.00715355261958128,0.00162085731578795,-0.00119719292650841,0.002527523491901,0.000309439453208771,-0.00107824080969683,0.0013842390217276,-0.00062784771855548,-0.00179751895106517,-0.00352922599674831,-0.000479448739997002,-0.00110776761709008,-0.00492415781989727,2.13811039922324E-05,0.0159643021406845,-0.00130180248739889,-0.00541930403948959,-0.00206269222576994,0.000733462717245004,0.000628038151971808,0.000920191983812768,0.00174399453119208,-0.00251667615265516,-0.00268940325010302,0.00100879500550631,-0.0064076024791559,0.00281029365488542,0.00174972123962344,0.000483252018013011,0.000506497092872128,0.00245100429938568,-0.0011877784778777,0.000994919174503006,-0.00806088593455759,-0.0383365409816716,-0.0002186734996725,0.0120837453165146,-0.000835165987260619,-0.000580031403366793,-0.000585104464041725,-0.000257135081272654,0.00170298671791996,0.000427452509146498,-6.82114321876315E-05,-0.000813055337207991,0.000835235495117465,-0.00591524847014138,0.000519792674325267,0.00014411484873314,7.70756642957532E-05,0.000395247949586411,0.000547587523507205,0.000215117172687837,0.000544060104051704,-0.000271751192747555,3.26896829201256E-05,0.000498748438600788,0.000208098477829252,0.000958180872851475,0.000190198899669744,0.000277272153071537,-0.000479637837458496,0.000481563729413353,-0.00107159189344756,-0.00447876225502156,-0.00101751939609375,-0.000304336400792138,0.000470584346683234,-0.000107538905638485,0.000497665346389106,0.000627949737679996,4.88949979697145E-05,-0.00039512155049054,-0.000118389117994278,0.00149631508035815,-0.000353937255178405,-0.00014493282836393,-1.8906071500617E-05,-0.000270730894031221,0.000408339719637822,-0.000162292026576541,-0.000622465904508408,0.00117917055376206,2.37910367652805E-05,0.000541294672045535,0.0286578921044221,0.000848041241150177,-0.000229159274147239,-0.000934505937354682,-0.000603240411954698,-0.0010702324591163,0.000187410970505925,1.78790299689979E-05,0.000802886831775998,0.00103065956133924,-0.000823926235624072,0.000408911112592239,8.50403344385062E-05,0.000307683699647114,0.0119753997901684,-0.000321856929034706,0.000343048105217271,-0.000442022818675981,-3.87510800961555E-07,0.000174167657425159,-0.000470461966187169,0.000182040731499078,-5.54861347575458E-05,0.000233528368121357,-0.000548186582887196,-4.09517291847794E-05,-0.000604543225381768,0.000819552843746733,0.00329620630098543,-0.000853530663792387,-0.00211663952703377,0.00122571002381183,0.000209782199216559,7.78695875536528E-05,0.000446698954495478,-0.000320285960619365,-0.000516382958644548,-0.0035319035185146,-0.00152702983301967,-0.000207718483142126,-0.000178483640810939,-0.00150404706251189,-0.0018301692535547,-0.000145351997950766,-0.000543404184612559,-0.00108156765225294,-0.000651559939335342,-0.000286594629011254,0.000392137977081541,0.000358231716715798,0.000424903822334191,0.000821339358106035,0.000104044456282294,0.00150026360041058,0.0004997062080635,0.000740913123229457,0.000657630652140806,-0.00034708471177565,0.000137686520486804,0.000886835651609047,0.000932922880622772,0.000679784094797131,-0.000284141678656834,-9.23957101742201E-06,-0.000139814669910684
        };
        TrackPeak.Result  s = findPeaks(a, 1);
        for (int i = 0; i < s.max.length; i++) {
            System.out.println(s.max[i]);
        }

    }
}

